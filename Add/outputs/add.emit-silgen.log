sil_stage raw

import Builtin
import Swift
import SwiftShims

func add(_ a: Int, _ b: Int) -> Int

@_hasStorage @_hasInitialValue let a: Int { get }

@_hasStorage @_hasInitialValue let b: Int { get }

@_hasStorage @_hasInitialValue let c: Int { get }

// a
sil_global hidden [let] @$s3add1aSivp : $Int

// b
sil_global hidden [let] @$s3add1bSivp : $Int

// c
sil_global hidden [let] @$s3add1cSivp : $Int

// main
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s3add1aSivp                      // id: %2
  %3 = global_addr @$s3add1aSivp : $*Int          // users: %18, %8
  %4 = integer_literal $Builtin.IntLiteral, 2     // user: %7
  %5 = metatype $@thin Int.Type                   // user: %7
  // function_ref Int.init(_builtinIntegerLiteral:)
  %6 = function_ref @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %7
  %7 = apply %6(%4, %5) : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %8
  store %7 to [trivial] %3 : $*Int                // id: %8
  alloc_global @$s3add1bSivp                      // id: %9
  %10 = global_addr @$s3add1bSivp : $*Int         // users: %19, %15
  %11 = integer_literal $Builtin.IntLiteral, 3    // user: %14
  %12 = metatype $@thin Int.Type                  // user: %14
  // function_ref Int.init(_builtinIntegerLiteral:)
  %13 = function_ref @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %14
  %14 = apply %13(%11, %12) : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %15
  store %14 to [trivial] %10 : $*Int              // id: %15
  alloc_global @$s3add1cSivp                      // id: %16
  %17 = global_addr @$s3add1cSivp : $*Int         // user: %22
  %18 = load [trivial] %3 : $*Int                 // user: %21
  %19 = load [trivial] %10 : $*Int                // user: %21
  // function_ref add(_:_:)
  %20 = function_ref @$s3addAAyS2i_SitF : $@convention(thin) (Int, Int) -> Int // user: %21
  %21 = apply %20(%18, %19) : $@convention(thin) (Int, Int) -> Int // user: %22
  store %21 to [trivial] %17 : $*Int              // id: %22
  %23 = integer_literal $Builtin.Int32, 0         // user: %24
  %24 = struct $Int32 (%23 : $Builtin.Int32)      // user: %25
  return %24 : $Int32                             // id: %25
} // end sil function 'main'

// add(_:_:)
sil hidden [ossa] @$s3addAAyS2i_SitF : $@convention(thin) (Int, Int) -> Int {
// %0                                             // users: %6, %2
// %1                                             // users: %6, %3
bb0(%0 : $Int, %1 : $Int):
  debug_value %0 : $Int, let, name "a", argno 1   // id: %2
  debug_value %1 : $Int, let, name "b", argno 2   // id: %3
  %4 = metatype $@thin Int.Type                   // user: %6
  // function_ref static Int.+ infix(_:_:)
  %5 = function_ref @$sSi1poiyS2i_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Int // user: %6
  %6 = apply %5(%0, %1, %4) : $@convention(method) (Int, Int, @thin Int.Type) -> Int // user: %7
  return %6 : $Int                                // id: %7
} // end sil function '$s3addAAyS2i_SitF'

// static Int.+ infix(_:_:)
sil [transparent] [serialized] @$sSi1poiyS2i_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Int

// Int.init(_builtinIntegerLiteral:)
sil [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int



