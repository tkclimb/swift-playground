sil_stage canonical

import Builtin
import Swift
import SwiftShims

func add(_ a: Int, _ b: Int) -> Int

@_hasStorage @_hasInitialValue let a: Int { get }

@_hasStorage @_hasInitialValue let b: Int { get }

@_hasStorage @_hasInitialValue let c: Int { get }

// a
sil_global hidden [let] @$s3add1aSivp : $Int

// b
sil_global hidden [let] @$s3add1bSivp : $Int

// c
sil_global hidden [let] @$s3add1cSivp : $Int

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s3add1aSivp                      // id: %2
  %3 = global_addr @$s3add1aSivp : $*Int          // users: %14, %6
  %4 = integer_literal $Builtin.Int64, 2          // user: %5
  %5 = struct $Int (%4 : $Builtin.Int64)          // user: %6
  store %5 to %3 : $*Int                          // id: %6
  alloc_global @$s3add1bSivp                      // id: %7
  %8 = global_addr @$s3add1bSivp : $*Int          // users: %15, %11
  %9 = integer_literal $Builtin.Int64, 3          // user: %10
  %10 = struct $Int (%9 : $Builtin.Int64)         // user: %11
  store %10 to %8 : $*Int                         // id: %11
  alloc_global @$s3add1cSivp                      // id: %12
  %13 = global_addr @$s3add1cSivp : $*Int         // user: %18
  %14 = load %3 : $*Int                           // user: %17
  %15 = load %8 : $*Int                           // user: %17
  // function_ref add(_:_:)
  %16 = function_ref @$s3addAAyS2i_SitF : $@convention(thin) (Int, Int) -> Int // user: %17
  %17 = apply %16(%14, %15) : $@convention(thin) (Int, Int) -> Int // user: %18
  store %17 to %13 : $*Int                        // id: %18
  %19 = integer_literal $Builtin.Int32, 0         // user: %20
  %20 = struct $Int32 (%19 : $Builtin.Int32)      // user: %21
  return %20 : $Int32                             // id: %21
} // end sil function 'main'

// add(_:_:)
sil hidden @$s3addAAyS2i_SitF : $@convention(thin) (Int, Int) -> Int {
// %0                                             // users: %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $Int, %1 : $Int):
  debug_value %0 : $Int, let, name "a", argno 1   // id: %2
  debug_value %1 : $Int, let, name "b", argno 2   // id: %3
  %4 = struct_extract %0 : $Int, #Int._value      // user: %7
  %5 = struct_extract %1 : $Int, #Int._value      // user: %7
  %6 = integer_literal $Builtin.Int1, -1          // user: %7
  %7 = builtin "sadd_with_overflow_Int64"(%4 : $Builtin.Int64, %5 : $Builtin.Int64, %6 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %9, %8
  %8 = tuple_extract %7 : $(Builtin.Int64, Builtin.Int1), 0 // user: %11
  %9 = tuple_extract %7 : $(Builtin.Int64, Builtin.Int1), 1 // user: %10
  cond_fail %9 : $Builtin.Int1                    // id: %10
  %11 = struct $Int (%8 : $Builtin.Int64)         // user: %12
  return %11 : $Int                               // id: %12
} // end sil function '$s3addAAyS2i_SitF'

// static Int.+ infix(_:_:)
sil public_external [transparent] [serialized] @$sSi1poiyS2i_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Int {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // user: %6
  %4 = struct_extract %1 : $Int, #Int._value      // user: %6
  %5 = integer_literal $Builtin.Int1, -1          // user: %6
  %6 = builtin "sadd_with_overflow_Int64"(%3 : $Builtin.Int64, %4 : $Builtin.Int64, %5 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %8, %7
  %7 = tuple_extract %6 : $(Builtin.Int64, Builtin.Int1), 0 // user: %10
  %8 = tuple_extract %6 : $(Builtin.Int64, Builtin.Int1), 1 // user: %9
  cond_fail %8 : $Builtin.Int1                    // id: %9
  %10 = struct $Int (%7 : $Builtin.Int64)         // user: %11
  return %10 : $Int                               // id: %11
} // end sil function '$sSi1poiyS2i_SitFZ'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'



